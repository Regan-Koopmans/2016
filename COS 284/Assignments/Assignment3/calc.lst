     1                                 %line 1+1 calc.asm
     2                                 [section .data]
     3                                 
     4 00000000 0000000000000000       number1 dq 0
     5 00000008 0000000000000000       number2 dq 0
     6 00000010 0000000000000000       result dq 0
     7 00000018 0000000000000000       numInput1 dq 0
     8 00000020 0000000000000000       numInput2 dq 0
     9 00000028 0000000000000000       dummyRead dq 0
    10 00000030 0000000000000000       operand dq 0
    11 00000038 0000000000000000       character dq 0
    12 00000040 2D00000000000000       negative dq 45
    13 00000048 0A00000000000000       newline dq 0x0a
    14 00000050 4552524F52000000       error_message dq "ERROR"
    15                                 
    16                                 [section .text]
    17                                 [global _start]
    18                                 
    19                                 _start:
    20                                 
    21 00000000 48C7C000000000          mov rax,0
    22 00000007 48C7C206000000          mov rdx,6
    23 0000000E 48C7C700000000          mov rdi,0
    24 00000015 48C7C6[00000000]        mov rsi,numInput1
    25 0000001C 0F05                    syscall
    26                                 
    27 0000001E 48C7C000000000          mov rax,0
    28 00000025 48C7C201000000          mov rdx,1
    29 0000002C 48C7C700000000          mov rdi,0
    30 00000033 48C7C6[00000000]        mov rsi,dummyRead
    31 0000003A 0F05                    syscall
    32                                 
    33 0000003C 48C7C000000000          mov rax,0
    34 00000043 48C7C201000000          mov rdx,1
    35 0000004A 48C7C700000000          mov rdi,0
    36 00000051 48C7C6[00000000]        mov rsi,operand
    37 00000058 0F05                    syscall
    38                                 
    39 0000005A 48C7C000000000          mov rax,0
    40 00000061 48C7C201000000          mov rdx,1
    41 00000068 48C7C700000000          mov rdi,0
    42 0000006F 48C7C6[00000000]        mov rsi,dummyRead
    43 00000076 0F05                    syscall
    44                                 
    45 00000078 48C7C000000000          mov rax,0
    46 0000007F 48C7C206000000          mov rdx,6
    47 00000086 48C7C700000000          mov rdi,0
    48 0000008D 48C7C6[00000000]        mov rsi,numInput2
    49 00000094 0F05                    syscall
    50                                 
    51 00000096 48C7C000000000          mov rax,0
    52 0000009D 48C7C203000000          mov rdx,3
    53 000000A4 48C7C700000000          mov rdi,0
    54 000000AB 48C7C6[00000000]        mov rsi,dummyRead
    55                                 
    56 000000B2 49C7C106000000          mov r9,6
    57                                 convertNum1:
    58                                 
    59 000000B9 4C8B0425[00000000]      mov r8,[numInput1]
    60 000000C1 8A0425[00000000]        mov al,[numInput1]
    61 000000C8 2C30                    sub al,48
    62 000000CA 4C0FB6E0                movzx r12,al
    63 000000CE 48C7C001000000          mov rax,1
    64 000000D5 4D89CA                  mov r10,r9
    65 000000D8 4983EA01                sub r10,1
    66 000000DC 49C7C30A000000          mov r11,10
    67                                 
    68                                 num1_mul10:
    69 000000E3 4983FA00                cmp r10,0
    70 000000E7 740A                    je num1_end_mul10
    71 000000E9 49F7E3                  mul r11
    72 000000EC 49FFCA                  dec r10
    73 000000EF 4983FA00                cmp r10,0
    74 000000F3 7FEC                    jg num1_mul10
    75                                 
    76                                 num1_end_mul10:
    77 000000F5 49F7E4                  mul r12
    78 000000F8 48010425[00000000]      add [number1],rax
    79 00000100 48C10C25[00000000]-     ror qword [numInput1],8
    80 00000100 08                 
    81 00000109 49FFC9                  dec r9
    82 0000010C 4983F900                cmp r9,0
    83 00000110 7FA5                    jg convertNum1
    84                                 
    85                                 
    86                                 
    87 00000112 49C7C106000000          mov r9,6
    88                                 
    89                                 convertNum2:
    90 00000119 4C8B0425[00000000]      mov r8,[numInput2]
    91 00000121 8A0425[00000000]        mov al,[numInput2]
    92 00000128 2C30                    sub al,48
    93 0000012A 4C0FB6E0                movzx r12,al
    94 0000012E 48C7C001000000          mov rax,1
    95 00000135 4D89CA                  mov r10,r9
    96 00000138 4983EA01                sub r10,1
    97 0000013C 49C7C30A000000          mov r11,10
    98                                 
    99                                 num2_mul10:
   100 00000143 4983FA00                cmp r10,0
   101 00000147 740A                    je num2_end_mul10
   102 00000149 49F7E3                  mul r11
   103 0000014C 49FFCA                  dec r10
   104 0000014F 4983FA00                cmp r10,0
   105 00000153 7FEC                    jg num2_mul10
   106                                 
   107                                 num2_end_mul10:
   108 00000155 49F7E4                  mul r12
   109 00000158 48010425[00000000]      add [number2],rax
   110 00000160 48C10C25[00000000]-     ror qword [numInput2],8
   111 00000160 08                 
   112 00000169 49FFC9                  dec r9
   113 0000016C 4983F900                cmp r9,0
   114 00000170 7FA5                    jg convertNum2
   115                                 
   116                                 
   117                                 
   118 00000172 488B0425[00000000]      mov rax,[operand]
   119 0000017A 4883F82B                cmp rax,43
   120 0000017E 7410                    je add_numbers
   121                                 
   122 00000180 4883F82D                cmp rax,45
   123 00000184 742C                    je subtract_numbers
   124                                 
   125 00000186 4883F82A                cmp rax,42
   126 0000018A 7448                    je multiply_numbers
   127                                 
   128 0000018C 4883F82F                cmp rax,47
   129 00000190 745C                    je divide_numbers
   130                                 
   131                                 add_numbers:
   132 00000192 488B0425[00000000]      mov rax,[number1]
   133 0000019A 48890425[00000000]      mov [result],rax
   134 000001A2 488B0425[00000000]      mov rax,[number2]
   135 000001AA 48010425[00000000]      add qword [result],rax
   136 000001B2 EB54                    jmp print_sign
   137                                 
   138                                 subtract_numbers:
   139 000001B4 488B0425[00000000]      mov rax,[number1]
   140 000001BC 48890425[00000000]      mov [result],rax
   141 000001C4 488B0425[00000000]      mov rax,[number2]
   142 000001CC 48290425[00000000]      sub qword [result],rax
   143 000001D4 EB32                    jmp print_sign
   144                                 
   145                                 multiply_numbers:
   146 000001D6 488B0425[00000000]      mov rax,[number1]
   147 000001DE 48F72425[00000000]      mul qword [number2]
   148 000001E6 48890425[00000000]      mov [result],rax
   149 000001EE EB18                    jmp print_sign
   150                                 
   151                                 divide_numbers:
   152 000001F0 488B0425[00000000]      mov rax,[number1]
   153 000001F8 48F73425[00000000]      div qword [number2]
   154 00000200 48890425[00000000]      mov [result],rax
   155 00000208 EBFE                    jmp print_sign
   156                                 
   157                                 
   158                                 
   159                                 print_sign:
   160 0000020A 488B0425[00000000]      mov rax,[result]
   161 00000212 4883F800                cmp rax,0
   162 00000216 7D1C                    jge display
   163 00000218 48C7C001000000          mov rax,1
   164 0000021F 48C7C201000000          mov rdx,1
   165 00000226 48C7C701000000          mov rdi,1
   166 0000022D 48C7C6[00000000]        mov rsi,negative
   167 00000234 0F05                    syscall
   168                                 
   169                                 display:
   170                                 
   171 00000236 49C7C040420F00          mov r8,1000000
   172 0000023D 488B0425[00000000]      mov rax,[result]
   173 00000245 48C7C200000000          mov rdx,0
   174 0000024C 49F7F0                  div r8
   175 0000024F 4883F800                cmp rax,0
   176 00000253 7F7A                    jg overflow
   177                                 
   178 00000255 488B0425[00000000]      mov rax,[result]
   179 0000025D 4883F800                cmp rax,0
   180 00000261 7D09                    jge display_loop
   181 00000263 48F7D8                  neg rax
   182 00000266 48890425[00000000]      mov [result],rax
   183                                 
   184                                 display_loop:
   185 0000026E 49C7C20A000000          mov r10,10
   186 00000275 4C89C0                  mov rax,r8
   187 00000278 48C7C200000000          mov rdx,0
   188 0000027F 49F7F2                  div r10
   189 00000282 4989C0                  mov r8,rax
   190                                 
   191 00000285 488B0425[00000000]      mov rax,[result]
   192 0000028D 48C7C200000000          mov rdx,0
   193 00000294 49F7F0                  div r8
   194                                 
   195 00000297 48891425[00000000]      mov [result],rdx
   196 0000029F 4883C030                add rax,48
   197 000002A3 48890425[00000000]      mov [character],rax
   198                                 
   199 000002AB 48C7C001000000          mov rax,1
   200 000002B2 48C7C201000000          mov rdx,1
   201 000002B9 48C7C701000000          mov rdi,1
   202 000002C0 48C7C6[00000000]        mov rsi,character
   203 000002C7 0F05                    syscall
   204                                 
   205 000002C9 4983F801                cmp r8,1
   206 000002CD 7F9D                    jg display_loop
   207 000002CF EB1C                    jmp exit
   208                                 
   209                                 overflow:
   210 000002D1 48C7C001000000          mov rax,1
   211 000002D8 48C7C205000000          mov rdx,5
   212 000002DF 48C7C701000000          mov rdi,1
   213 000002E6 48C7C6[00000000]        mov rsi,error_message
   214 000002ED 0F05                    syscall
   215                                 
   216                                 exit:
   217                                 
   218                                 
   219                                 
   220                                 
   221                                 
   222                                 
   223 000002EF 48C7C03C000000          mov rax,60
   224 000002F6 48C7C700000000          mov rdi,0
   225 000002FD 0F05                    syscall
